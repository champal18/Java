package modeloDAO;

import java.util.Collections;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Query;

import modelo.Foto;
import modelo.Ruta;

public class FotoDAO
{

	public void guardarFoto(Foto f)
	{
		// TODO Auto-generated method stub
		SingletonEMF single = SingletonEMF.getIns();
		EntityManagerFactory emf = single.getEMF();
		EntityManager em = emf.createEntityManager();
		EntityTransaction etx = em.getTransaction();
		etx.begin();
		try
		{
			em.persist(f);
		} catch (Exception e)
		{
			System.out.println(e.toString());
		}
		
		etx.commit();
		em.close();
	}

	public void modificarFoto(Foto f) 
	{
		// TODO Auto-generated method stub
		SingletonEMF single = SingletonEMF.getIns();
		EntityManagerFactory emf = single.getEMF();
		EntityManager em = emf.createEntityManager();
		EntityTransaction etx = em.getTransaction();
		etx.begin();
		try
		{
			em.merge(f);
		} catch (Exception e)
		{
			System.out.println(e.toString());
		}
		
		etx.commit();
		em.close();
	}

	public void eliminarFoto(Foto f) 
	{
		// TODO Auto-generated method stub
		SingletonEMF single = SingletonEMF.getIns();
		EntityManagerFactory emf = single.getEMF();
		EntityManager em = emf.createEntityManager();
		EntityTransaction etx = em.getTransaction();
		etx.begin();
		try
		{
			em.remove(em.find(Foto.class, f.getId()));
			etx.commit();
			
		} catch (Exception e)
		{
			System.out.println(e.toString());
		}
		em.close();
	}
		

	@SuppressWarnings("unchecked")
	public List<Foto> recuperarFotos(long idRuta)
	{
		// TODO Auto-generated method stub
		SingletonEMF single = SingletonEMF.getIns();
		EntityManagerFactory emf = single.getEMF();
		EntityManager em = emf.createEntityManager();
		
		List<Foto> fotos = null;
		
		try {
			Query q = em.createQuery("FROM Foto WHERE ruta_id = '"+idRuta+"'");
			if(!q.getResultList().isEmpty())
				fotos = Collections.checkedList(q.getResultList(), Foto.class);	
		} catch (Exception e) {
			fotos = null;
			System.out.println("Excepcion!");
		}
		
		em.close();
		return fotos;
	}
	
	public Foto recuperarFoto(long id) 
	{
		// TODO Auto-generated method stub
		SingletonEMF single = SingletonEMF.getIns();
		EntityManagerFactory emf = single.getEMF();
		EntityManager em = emf.createEntityManager();
		Foto f = null;
		try
		{
			f = em.find(Foto.class, id);
		} catch (Exception e)
		{
			System.out.println(e.toString());
		}
		em.close();
		
		return f;
	}
	
	@SuppressWarnings("unchecked")
	public List<Foto> recuperarAllFotos()
	{
		// TODO Auto-generated method stub
		SingletonEMF single = SingletonEMF.getIns();
		EntityManagerFactory emf = single.getEMF();
		EntityManager em = emf.createEntityManager();
		
		List<Foto> fotos = null;
		
		try {
			Query q = em.createQuery("FROM Foto");
			if(!q.getResultList().isEmpty())
				fotos = Collections.checkedList(q.getResultList(), Ruta.class);	
		} catch (Exception e) {
			fotos = null;
			System.out.println("Excepcion!");
		}
		
		em.close();
		return fotos;
	}

}
