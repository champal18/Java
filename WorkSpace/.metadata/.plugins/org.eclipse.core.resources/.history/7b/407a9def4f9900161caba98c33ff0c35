package modeloDAO;

import java.util.*;

import javax.persistence.*;
import modelo.Ruta;
import rest.Punto;

public enum PuntoDao
{ 
	instance;

	private Map<Long, Punto> puntos = new HashMap<Long,Punto>();
	
	public Map<Long, Punto> getPuntos()
	{
		return puntos;
	}

	public void guardarPuntos(Ruta ruta) 
	{
		// TODO Auto-generated method stub		
		SingletonEMF single = SingletonEMF.getIns();
		EntityManagerFactory emf = single.getEMF();
		EntityManager em = emf.createEntityManager();
		EntityTransaction etx = em.getTransaction();
		etx.begin();
		
		List<Punto> puntoList = new ArrayList<Punto>();
		puntoList.addAll(this.puntos.values());
		
		try
		{
			int cant = puntoList.size();
			for(int j=0;j<cant;j++)
			{
				Punto p = new Punto();
				p = puntoList.get(j);
				p.setRuta(ruta);
				em.persist(p);
			}
			
		} catch (Exception e)
		{
			System.out.println(e.toString());
		}
		etx.commit();
		em.close();
		
	}

	public void modificarPunto(Punto p)
	{
		// TODO Auto-generated method stub
		SingletonEMF single = SingletonEMF.getIns();
		EntityManagerFactory emf = single.getEMF();
		EntityManager em = emf.createEntityManager();
		EntityTransaction etx = em.getTransaction();
		etx.begin();
		try
		{
			em.merge(p);
		} catch (Exception e)
		{
			System.out.println(e.toString());
		}
		
		etx.commit();
		em.close();
		
	}

	public void eliminarPunto(Punto p)
	{
		// TODO Auto-generated method stub
		SingletonEMF single = SingletonEMF.getIns();
		EntityManagerFactory emf = single.getEMF();
		EntityManager em = emf.createEntityManager();
		EntityTransaction etx = em.getTransaction();
		etx.begin();
		try
		{
			em.remove(em.find(Punto.class, p.getId()));
		} catch (Exception e)
		{
			System.out.println(e.toString());
		}
		
		etx.commit();
		em.close();
		
	}
	
	public void eliminarPuntosRuta(long idRuta)
	{
		// TODO Auto-generated method stub
		SingletonEMF single = SingletonEMF.getIns();
		EntityManagerFactory emf = single.getEMF();
		EntityManager em = emf.createEntityManager();
		EntityTransaction etx = em.getTransaction();
		etx.begin();
		
		try
		{
			Query q = em.createQuery("delete Punto where ruta_id = '"+idRuta+"'");
			q.executeUpdate();
		} catch (Exception e)
		{
			System.out.println(e.toString());
		}
		
		etx.commit();
		em.close();
		
	}

	public Punto recuperarPunto(long id)
	{
		// TODO Auto-generated method stub
		SingletonEMF single = SingletonEMF.getIns();
		EntityManagerFactory emf = single.getEMF();
		EntityManager em = emf.createEntityManager();
		Punto p = null;
		try
		{
			p = em.find(Punto.class, id);
		} catch (Exception e)
		{
			System.out.println(e.toString());
		}
		em.close();
		
		return p;
	}
	
	@SuppressWarnings("unchecked")
	public List<Punto> recuperarPuntos(long idRuta)
	{
		// TODO Auto-generated method stub
		SingletonEMF single = SingletonEMF.getIns();
		EntityManagerFactory emf = single.getEMF();
		EntityManager em = emf.createEntityManager();
		
		List<Punto> puntos = null;
		
		try {
			Query q = em.createQuery("FROM Punto where ruta_id='"+idRuta+"'");
			if(!q.getResultList().isEmpty())
				puntos = Collections.checkedList(q.getResultList(), Punto.class);	
		} catch (Exception e) {
			puntos = null;
			System.out.println("Excepcion!");
		}
		
		em.close();
		return puntos;
	}
	
	public void limpiarMapa()
	{
		puntos = new HashMap<Long,Punto>();
		Punto.idstatic = 0;
	}
	
	@SuppressWarnings("unchecked")
	public void recuperarPuntosRuta(long idRuta)
	{
		// TODO Auto-generated method stub
		SingletonEMF single = SingletonEMF.getIns();
		EntityManagerFactory emf = single.getEMF();
		EntityManager em = emf.createEntityManager();
		
		List<Punto> lista = null;
		
		try {
			Query q = em.createQuery("FROM Punto where ruta_id='"+idRuta+"'");
			lista = Collections.checkedList(q.getResultList(), Punto.class);	
		} catch (Exception e) {
			lista = null;
			System.out.println("Excepcion!");
		}
		
		em.close();
		
		this.puntos.clear();
		if(!lista.isEmpty())
		{
			Punto.idstatic = 0;
			int cant = lista.size();
			int i;
			for(i=0;i<cant;i++)
			{
				Punto p = new Punto(lista.get(i).lat,lista.get(i).lon);
				this.puntos.put(p.getIndice(), p);
			}
		}
	}
	
	@SuppressWarnings({ "unchecked" })
	public List<Punto> recuperarAllPuntos()
	{
		// TODO Auto-generated method stub
		SingletonEMF single = SingletonEMF.getIns();
		EntityManagerFactory emf = single.getEMF();
		EntityManager em = emf.createEntityManager();
		
		List<Punto> lista = null;
		
		try {
			Query q = em.createQuery("FROM Punto");
			lista = Collections.checkedList(q.getResultList(), Punto.class);	
		} catch (Exception e) {
			lista = null;
			System.out.println("Excepcion!");
		}
		
		em.close();
		
		return lista;
	}
	
}
