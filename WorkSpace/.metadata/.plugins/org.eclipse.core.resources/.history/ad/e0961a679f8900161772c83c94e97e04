package controller;

import java.util.Collections;
import java.util.List;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;
import javax.servlet.http.HttpSession;

import jersey.repackaged.com.google.common.collect.Lists;
import modelo.Persona;
import modelo.Sexo;
import modeloDAO.PersonaDAO;

public class AdminBean 
{
	private PersonaDAO pDao = new PersonaDAO();
	private Persona adminLogin;
	
	// Lista de usuarios de la BD
	private List<Persona> listaUsuarios = pDao.recuperarUsuarios();
	private List<Persona> backupUsuarios = pDao.recuperarUsuarios();

	// Enumerativo para definir orden actual de la lista
	private enum orden {alfabeticamente, antiguedad, cantRutas};
	private enum criterio {ascendente, descendente};

	// Ordenamiento actual
	private orden ordenActual = orden.alfabeticamente;
	private criterio criterioActual = criterio.ascendente;
	
	// Flags para evitar procesamiento de mas
	private boolean flagOrden = false;

	public AdminBean(){}
	
	public String habilitarPersona(Persona selec)	// --> parametro enviado desde el xhtml
	{
		selec.setHabilitado(!selec.getHabilitado());
		pDao.modificarPersona(selec);
		return null;
	}
	
	public Persona getAdminLogin()
	{
		if(this.adminLogin == null)
		{	
			HttpSession session;
			FacesContext context = FacesContext.getCurrentInstance();
		    session = (HttpSession) context.getExternalContext().getSession(true);
		       
			Long id = (Long) session.getAttribute("usrId");
			if(id != null)
			{
				this.adminLogin = pDao.recuperarPersona(id);
			}
		}
		return adminLogin;
	}

	public void setAdminLogin(Persona adminLogin) {
		this.adminLogin = adminLogin;
	}
	
	public String editarPersona()
	{
		pDao.modificarPersona(adminLogin);
		return "editarAdmin";
	}
	
	public SelectItem[] getGenderValues()
	{
		SelectItem[] items = new SelectItem[Sexo.values().length];
	    int i = 0;
	    for(Sexo g: Sexo.values())
	    {
	      items[i++] = new SelectItem(g, g.name());
	    }
	    return items;
	 }

	public List<Persona> getBackupUsuarios() {
		return backupUsuarios;
	}

	public void setBackupUsuarios(List<Persona> backupUsuarios) {
		this.backupUsuarios = backupUsuarios;
	}

	public List<Persona> getListaUsuarios()
	{
		this.backupUsuarios =  pDao.recuperarUsuarios();
		this.listaUsuarios.clear();
		this.listaUsuarios.addAll(backupUsuarios);
		if(!flagOrden)
			ordenar();
		return listaUsuarios;
	}

	public void setListaUsuarios(List<Persona> listaUsuarios) {
		this.listaUsuarios = listaUsuarios;
	}
	
	private void ordenar()
	{
		switch(this.ordenActual)
		{
		case alfabeticamente:
			Collections.sort(this.listaUsuarios, Persona.Comparators.NAME);
			if(criterioActual = criterio.descendente)
				this.listaUsuarios = Lists.reverse(listaUsuarios);
			break;
		case antiguedad:
			break;
		case cantRutas:
			Collections.sort(this.listaUsuarios, Persona.Comparators.CANTRUTAS);
			break;
		default:
			break;
		}
	}
	
	public SelectItem[] getOrdenValues()
	{
		SelectItem[] items = new SelectItem[orden.values().length];
	    int i = 0;
	    for(orden g: orden.values())
	    {
	      items[i++] = new SelectItem(g, g.name());
	    }
	    return items;
	 }
	
	public SelectItem[] getCriterioValues()
	{
		SelectItem[] items = new SelectItem[criterio.values().length];
	    int i = 0;
	    for(criterio g: criterio.values())
	    {
	      items[i++] = new SelectItem(g, g.name());
	    }
	    return items;
	 }
	
	public orden getOrdenActual() {
		return ordenActual;
	}

	public void setOrdenActual(orden ordenActual) {
		this.ordenActual = ordenActual;
	}
	
	public String actualizar()
	{
		this.flagOrden = false;
		return null;
	}

	public criterio getCriterioActual() {
		return criterioActual;
	}

	public void setCriterioActual(criterio criterioActual) {
		this.criterioActual = criterioActual;
	}
}
